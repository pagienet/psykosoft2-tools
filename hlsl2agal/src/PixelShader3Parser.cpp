#include "PixelShader3Parser.h"

#include <iostream>

namespace psyko
{
	std::string ReadLine(std::istream& stream);
	std::string ParseHeaderComments(std::istream& stream);
	void ParseVersion(std::istream& stream);
	std::string ParseDeclarations(std::istream& stream);
	void ParseStatements(std::istream& stream, PixelShader* target);

	PixelShader3Parser::PixelShader3Parser()
	{
	}

	PixelShader3Parser::~PixelShader3Parser()
	{
	}

	PixelShader PixelShader3Parser::Parse(std::istream& stream)
	{
		PixelShader program;
		// skip first three lines (Generated by Microsoft stuff)
		ReadLine(stream);
		ReadLine(stream);
		ReadLine(stream);
		program.SetInfo(ParseHeaderComments(stream));
		ParseVersion(stream);
		program.SetInfo(program.GetInfo() + ParseDeclarations(stream));
		ParseStatements(stream, &program);
		return program;
	}

	std::string ReadLine(std::istream& stream)
	{
		std::string line;
		char ch;
		while (true) {			
			ch = stream.get();
			if (!ch || ch == '\n')
				return line;
			line += ch;
		}

		return line;
	}

	std::string ParseHeaderComments(std::istream& stream)
	{
		std::string header;

		while (true) {
			char ch = stream.peek();
			if (ch != '/')
				return header;
			
			header += ReadLine(stream) + '\n';
		}

		return header;
	}

	void ParseVersion(std::istream& stream)
	{
		std::string value;
		stream >> value;
		if (value != "ps_3_0") {
			std::cout << "Unsupported pixel shader version. Make sure its PS 3_0";
			exit(0);
		}
	}

	std::string ParseDeclarations(std::istream& stream)
	{
		std::string header = "// Declarations:\n";

		while (true) {
			std::string token;
			std::streamoff pos = stream.tellg();
			stream >> token;
			if (token == "def")
				header += "// Define" + ReadLine(stream) + "\n";
			else if (token.substr(0, 3) == "dcl")  {
				// ignore
				ReadLine(stream);
			}
			else {
				stream.seekg(pos);
				header += "//\n";
				return header;
			}
		}

		return header;
	}

	void ParseStatements(std::istream& stream, PixelShader* target)
	{
		std::vector<Statement> statements;

		while (true) {
			// last line will be a comment
			std::string token;
			std::streamoff pos = stream.tellg();
			stream >> token;

			if (token == "//") {
				ReadLine(stream);
				return;
			}
			
			stream.seekg(pos);
			Statement statement;
			stream >> statement;			
			target->PushStatement(statement);			
		}
	}
}